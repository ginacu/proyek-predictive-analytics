# -*- coding: utf-8 -*-
"""Proyek Pertama Predictive Analytics - Gina Cahya Utami.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12LKtmNDTQi4ACdjzmocjIHUpEWcBizhl

#### Nama : Gina Cahya Utami
#### Username : Gina Cahya
#### SIB ID : M182V4139
#### Email : ginacu.gc@gmail.com
#### Dataset : https://www.kaggle.com/sandeep04201988/housing-price-index-using-crime-rate-data
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor

"""# Data Loading"""

df = pd.read_csv('merged_dataset.csv')
df.head()

"""Deskripsi Variabel :
* Year = Tahun
* index_nsa = Harga rumah (non seasonal index)
* City, State = Kota, Negara Bagian
* Population = Populasi
* Violent Crimes = Kekerasan
* Homicides = Pembunuhan 
* Rapes = Perkosaan
* Assaults = Penyerangan
* Robberies = Perampokan
"""

df.shape

df.info()

df.describe()

"""# EDA : Menangani Missing Value"""

df.isnull().sum()

new_df = df.dropna()

new_df.isna().sum()

new_df.shape

new_df.info()

"""Dapat dilihat dari informasi df.info() di atas bahwa terdapat kejanggalan diantaranya yakni fitur Year, Population, Violent Crimes, Homicides, Rapes, Assaults, dan Robberies tipe datanya float64, kalau dipikir tidak mungkin tahunnya merupakan bentuk float. Maka dari itu solusinya kita ubah float ke bentuk int"""

new_df['Year'] = new_df['Year'].astype('int')
new_df['Population'] = new_df['Population'].astype('int')
new_df['Violent Crimes'] = new_df['Violent Crimes'].astype('int')
new_df['Homicides'] = new_df['Homicides'].astype('int')
new_df['Rapes'] = new_df['Rapes'].astype('int')
new_df['Assaults'] = new_df['Assaults'].astype('int')
new_df['Robberies'] = new_df['Robberies'].astype('int')

new_df.info()

"""# EDA : Menangani Outliers"""

sns.boxplot(x=new_df['Year'])

sns.boxplot(x=new_df['Population'])

sns.boxplot(x=new_df['Violent Crimes'])

sns.boxplot(x=new_df['Homicides'])

sns.boxplot(x=new_df['Rapes'])

sns.boxplot(x=new_df['Assaults'])

sns.boxplot(x=new_df['Robberies'])

"""Boxplot pada fitur numerik diatas mempunyai jumlah outlier yang cukup banyak, kecuali pada fitur 'Year', sehingga solusinya kita menggunakan teknik IQR untuk menghilangkan outlier"""

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR=Q3-Q1
df=df[~((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita drop outliers
df.shape

"""# EDA : Univariate Analysis

Bagi fitur pada dataset menjadi dua bagian, yaitu numerical features dan categorical features
"""

numerical_features = ['Year', 'index_nsa', 'Population', 'Violent Crimes', 'Homicides', 'Rapes', 'Assaults', 'Robberies']
categorical_features = ['City, State']

"""Categorical Features"""

# fitur City, State

feature = categorical_features[0]
count = new_df[feature].value_counts()
percent = 100*new_df[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Numerical Features"""

new_df.hist(bins=50, figsize=(20,15))
plt.show()

"""# EDA : Multivariate Analysis

Categorical Features
"""

cat_features = new_df.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
    sns.catplot(x=col, y="index_nsa", kind="bar", dodge=False, height = 4, aspect = 3,  data=new_df, palette="Set3")
    plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

"""Fitur City, State dengan grade lebih tinggi memiliki harga yang lebih rendah. Hal ini berarti bahwa fitur kategori memiliki pengaruh yang rendah terhadap harga. Sehingga lebih baik kita drop saja"""

new_df.drop(['City, State'], axis=1, inplace=True)
new_df.head()

"""Numerical Features"""

sns.pairplot(new_df, diag_kind = 'kde')

"""Observasi korelasi antara fitur numerik dengan fitur target menggunakan fungsi corr()"""

plt.figure(figsize=(10, 8))
correlation_matrix = new_df.corr().round(2)
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix", size=20)

"""# Data Preparation

Train-Test-Split
"""

x = new_df.drop(["index_nsa"],axis =1)
y = new_df["index_nsa"]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 150)

print(f'Total dataset: {len(x)}')
print(f'Total train dataset: {len(x_train)}')
print(f'Total test dataset: {len(x_test)}')

"""Standarisasi """

numerical_features = ['Year', 'Population', 'Violent Crimes', 'Homicides', 'Rapes', 'Assaults', 'Robberies']
scaler = StandardScaler()
scaler.fit(x_train[numerical_features])
x_train[numerical_features] = scaler.transform(x_train.loc[:, numerical_features])
x_train[numerical_features].head()

"""mengecek nilai mean dan standar deviasi pada setelah proses standarisasi"""

x_train[numerical_features].describe().round(4)

"""# Modelling

Siapkan DataFrame untuk analisis model
"""

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['LinearRegression', 'KNN', 'RandomForest'])

"""# Modelling : Linear Regression"""

lin_reg = LinearRegression()
lin_reg.fit(x_train, y_train)

models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=lin_reg.predict(x_train), y_true=y_train)

"""# Modelling : K-Nearest Neighbor"""

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(x_train, y_train)

models.loc['train_mse','KNN'] = mean_squared_error(y_pred=knn.predict(x_train), y_true=y_train)

"""# Modelling : Random Forest"""

RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(x_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(x_train), y_true=y_train)

"""# Evaluasi Model

Proses scaling
"""

x_test.loc[:, numerical_features] = scaler.transform(x_test[numerical_features])

"""Evaluasi kedua model kita dengan metrik MSE"""

mse = pd.DataFrame(columns=['train', 'test'], index=['LinearRegression','KNN', 'RandomForest'])
model_dict = {'LinearRegression': lin_reg, 'KNN': knn, 'RandomForest':RF}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(x_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(x_test))/1e3

mse

"""Buat versi chart nya agar mudah dibaca"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

prediksi = x_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)

"""Terlihat bahwa prediksi dengan Random Forest (RF) memberikan hasil yang paling mendekati."""

print("Accuracy score dari model Linear Regression = ", lin_reg.score(x_test, y_test))
print("Accuracy score dari model KNN               = ", knn.score(x_test, y_test))
print("Accuracy score dari model Random Forest     = ", RF.score(x_test, y_test))

"""Dan accuracy pada model Random Forest yang paling tinggi yakni mencapai lebih dari 90%. Sehingga model yang cocok yakni Random Forest"""